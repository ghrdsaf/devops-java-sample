pipeline {
 agent {
   label 'maven'
  }
    parameters { 
        string(name: 'BUILD_NUMBER',defaultValue: '1.0',description: '')
        string(name: 'APP_NAME',defaultValue: 'devops-sample',description: '')
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'aliyun-id'
        GITEE_CREDENTIAL_ID = 'gitee-id'
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'registry.cn-hangzhou.aliyuncs.com'
        DOCKERHUB_NAMESPACE = 'liuyik8s'
        GITEE_ACCOUNT = 'liuyik8s'
        BRANCH_NAME = 'master'
        }

    stages {
        stage ('checkout scm') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitee-id', url: 'https://gitee.com/liuyik8s/devops-java-sample.git']]])
  
            }
        }
 
/*        stage('checking'){
            steps {
                sh '''
                pwd
                echo "webhook"
                echo "webhook"
                ls -l
                sleep 2
                echo "$[app]"
                '''
            }    
      }
        stage('Unit Testing'){
          steps {
            echo "Unit Testing..."
          }
    }
    
       stage ('unit test') {
            steps {
                container ('maven') {
     //              sh 'mvn clean  -gs `pwd`/configuration/settings.xml test'
                }
            }
        }
 
        stage ('build & push') {
            steps {
                container ('maven') {
                    sh 'mvn  -Dmaven.test.skip=true -gs `pwd`/configuration/settings.xml clean package'
                    sh 'sleep 1'
                    sh 'env'
                    sh 'ls -l target'
                    sh 'docker build -f Dockerfile-online -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                    withCredentials([usernamePassword(passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,credentialsId : "$DOCKER_CREDENTIAL_ID" ,)]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                        sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                    }
                }
            }
     }
    
        stage('push latest'){
           when{
             branch 'master'
           }
           steps{
                container ('maven') {
                  sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
                  sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest '
                }
           }
        }
   */ 
       stage('deploy to dev') {
          when{
            branch 'master'
          }
          steps {
       //     input(id: 'deploy-to-dev', message: 'deploy to dev?')
              sh "ls -l deploy/dev-ol"
           //   kubernetesDeploy configs: 'deploy/dev-ol/**', kubeConfig: [path: ''], kubeconfigId: 'demo-kubeconfig', secretName: 'aliyun', secretNamespace: 'jenkins-k8s', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
       //       kubernetesDeploy(configs: 'deploy/dev-ol/**', enableConfigSubstitution: false, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
              sh "ls -l deploy/dev-ol"
              kubeconfig(caCertificate: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXhNekExTURjMU9Gb1hEVE14TVRFeE1UQTFNRGMxT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2xOCmp5Qm1uNHlncVhzNlpOSmlXYkU3L1NvTDdEZFdKTTBDdklqb0xaVXBzWlcyUmx3MU1jSW02WTN6eHEyeHZYMVAKZVRvbjRJU0pYRUpFNVFhRVFsb3RYM3lYOFdBRGZ6MHJwYjd0WjZBaUtvazJqVmwvbFM2VWpXaFlBemllbU04cwpIUkVMNHBMeGgzUjlBWU5uTk1oaVF4eXMwYk1QRHBYWk5wV2VKd3VzYnB4ZWsybXZzNFpWWDJOY0xkYVZxdC9CClZtcUZpVEJvMTZVK0RqZWN3MTRETmxXUG9ob1dlT2Vwc1F1NVZWZUhKZXhrc0JUcXRNOTJ1Z3pZaTJ2NlZ1czcKQ0o2TW56aHZ4VEtnaC9Oa3Q1QkV2NWwxLzduY2VDNDhteVVOMU5rRUdNWHhCb0dEa2V2Nnc3RDI0MFR2ajVHMgp4Vk9Vd1BmTHRiWk9sRWwvOGI4Q0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDdi9xTWZ4L2QxS3ZqUVh4VHBYKzF2MitDUldNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBNVpCTXorZlgzSTlqbmlEQ1JQTWpOallBUkJpQ09FVW1OKzdIRkFQNVIxOThrQjJjbwpGa3cxejlPNXlmeXFwNnRKOS9XUWNDT1N3UERpektmVWhnenVja0tuTDFwdVlMb0t3a3E4aDBvUTAwVE5SYzJwCnV6cUNtQ1FidiswZnNQOEljNkp0RFJRYzh1ZEhuemFRNVl6TDhXbER6bngyaGxrUDFOVzVNTjdDbTdTeXVxUmUKY1B4MWk2Skd6b2UwQ01UaFo3Wi9WTStWNHF5eEJRMWFBMTM5VS84NUNlUWNVQjM2VzRuTk9ZWkFoVldQT3Q0MApuMjBzaFZjSURNc2lucHJ3czBiWitteDROTFZjRmJpaXBvYk5XSFNyQllZSDg5ckFTYW5xUFNuN0VKK252VjZECm9kam5pSnZDTGxzbURnS3RVVG1zaE9VZ0greEdENWV2a2ZXVQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==', serverUrl: 'https://192.168.65.98:6443') {
    // kubectl apply -f deploy/dev-ol/*
}
              sh "cat deploy/dev-ol/*.yaml"
              sh "sleep 6"
              sh "kubectl apply -f deploy/dev-ol/*"
          }
        }

        stage('push with tag'){
          when{
            expression{
              return params.TAG_NAME =~ /v.*/
            }
           }
          steps {
              container ('maven') {
         //       input(id: 'release-image-with-tag', message: 'release image with tag?')
                  withCredentials([usernamePassword(credentialsId: "$GITHUB_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh 'git config --global user.email "kubesphere@yunify.com" '
                    sh 'git config --global user.name "kubesphere" '
                    sh 'git tag -a $TAG_NAME -m "$TAG_NAME" '
                    sh 'git push http://$GIT_USERNAME:$GIT_PASSWORD@github.com/$GITHUB_ACCOUNT/devops-java-sample.git --tags --ipv4'
                  }
                sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME '
                sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME '
          }
          }
        }
 
       stage('deploy to production') {
          when{
            expression{
              return params.TAG_NAME =~ /v.*/
            }
          }
          steps {
           // input(id: 'deploy-to-production', message: 'deploy to production?')
            kubernetesDeploy(configs: 'deploy/prod-ol/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
          }
        }
}
}
